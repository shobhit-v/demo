<?php

namespace Demo\PrimeFactor\Test;

use Demo\PrimeFactor\Main;
use PHPUnit\Framework\Assert;
use PHPUnit\Framework\TestCase;


class MainTest extends TestCase
{
    private $object;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->object = new main();
    }

    /**
     * @test
     */
    public function oneHasNotPrimeFactor()
    {
        Assert::assertEquals([], $this->object->calculatePrimeFactorFor(1));
    }

    /**
     * @test
     */
    public function twoHasOnlyItselfAsPrimeFactor()
    {
        Assert::assertEquals([2], $this->object->calculatePrimeFactorFor(2));
    }

    /**
     * @test
     */
    public function threeHasOnlyItselfAsPrimeFactor()
    {
        Assert::assertEquals([3], $this->object->calculatePrimeFactorFor(3));
    }

    /**
     * @test
     */
    public function fourHasTwoTimeTwoAsPrimeFactor()
    {
        Assert::assertEquals([2, 2], $this->object->calculatePrimeFactorFor(4));
    }

    /**
     * @test
     */
    public function fiveHasOnlyItselfAsPrimeFactor()
    {
        Assert::assertEquals([5], $this->object->calculatePrimeFactorFor(5));
    }

    /**
     * @test
     */
    public function sixHasTwoAndThreeAsPrimeFactor()
    {
        Assert::assertEquals([2, 3], $this->object->calculatePrimeFactorFor(6));
    }

    /**
     * @test
     */
    public function sevenHasOnlyAtSelfAsPrimeFactor()
    {
        Assert::assertEquals([7], $this->object->calculatePrimeFactorFor(7));
    }

    /**
     * @test
     */
    public function EightHasThreeTimesTwoAsPrimeFactor()
    {
        Assert::assertEquals([2, 2, 2], $this->object->calculatePrimeFactorFor(8));
    }

    /**
     * @test
     */
    public function NineHasTwoTimeThreeAsPrimeFactor()
    {
        Assert::assertEquals([3, 3], $this->object->calculatePrimeFactorFor(9));
    }

    /**
     * @test
     */
    public function TenHasTwoAndFiveAsPrimeFactor()
    {
        Assert::assertEquals([2,5], $this->object->calculatePrimeFactorFor(10));
    }

}
